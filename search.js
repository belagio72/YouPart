document.addEventListener('DOMContentLoaded', () => {
  (async () => {
    // DOM –µ–ª–µ–º–µ–Ω—Ç–∏
    const makeSelect = document.getElementById('makeSelect');
    const modelSelect = document.getElementById('modelSelect');
    const yearSelect = document.getElementById('yearSelect');
    const partInput = document.getElementById('partQuery');
    const regionSelect = document.getElementById('regionSelect');
    const searchBtn = document.getElementById('searchBtn');
    const resultsDiv = document.getElementById('results');
    const paginationDiv = document.getElementById('pagination');

    // –°—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
    let vehiclesData = {};
    let currentOffset = 0;
    let currentQuery = '';
    let currentRegion = 'europe';
    let totalPages = 0;
    const itemsPerPage = 20;

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    async function loadVehicleData() {
      try {
        const res = await fetch('/vehicles.json');
        vehiclesData = await res.json();

        // –ù—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞–¥–∞—â–∏—Ç–µ –º–µ–Ω—é—Ç–∞
        makeSelect.innerHTML = '<option value="">–ú–∞—Ä–∫–∞</option>';
        modelSelect.innerHTML = '<option value="">–ú–æ–¥–µ–ª</option>';
        yearSelect.innerHTML = '<option value="">–ì–æ–¥–∏–Ω–∞</option>';

        // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—Ä–∫–∏—Ç–µ
        const makes = Object.keys(vehiclesData.–º–∞—Ä–∫–∏);
        makes.forEach(make => {
          const option = document.createElement('option');
          option.value = make;
          option.textContent = make;
          makeSelect.appendChild(option);
        });

        // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≥–æ–¥–∏–Ω–∏—Ç–µ (1970-2025)
        for (let y = 2025; y >= 1970; y--) {
          const option = document.createElement('option');
          option.value = y;
          option.textContent = y;
          yearSelect.appendChild(option);
        }
      } catch (err) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ vehicles.json:', err);
      }
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏ –∏–∑–±–æ—Ä –Ω–∞ –º–∞—Ä–∫–∞
    function updateModels() {
      const selectedMake = makeSelect.value;
      modelSelect.innerHTML = '<option value="">–ú–æ–¥–µ–ª</option>';
      yearSelect.innerHTML = '<option value="">–ì–æ–¥–∏–Ω–∞</option>';

      if (selectedMake && vehiclesData.–º–∞—Ä–∫–∏[selectedMake]) {
        vehiclesData.–º–∞—Ä–∫–∏[selectedMake].forEach(model => {
          const option = document.createElement('option');
          option.value = model;
          option.textContent = model;
          modelSelect.appendChild(option);
        });
      }
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –≥–æ–¥–∏–Ω–∏—Ç–µ –ø—Ä–∏ –∏–∑–±–æ—Ä –Ω–∞ –º–æ–¥–µ–ª
    function updateYears() {
      yearSelect.innerHTML = '<option value="">–ì–æ–¥–∏–Ω–∞</option>';
      const selectedMake = makeSelect.value;
      const selectedModel = modelSelect.value;
      
      if (selectedMake && selectedModel) {
        for (let y = 2025; y >= 1970; y--) {
          const option = document.createElement('option');
          option.value = y;
          option.textContent = y;
          yearSelect.appendChild(option);
        }
      }
    }

    // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–æ—Ç–æ —Ç—ä—Ä—Å–µ–Ω–µ
    function restoreLastSearch() {
      const urlParams = new URLSearchParams(window.location.search);
      const savedQuery = urlParams.get('query');
      const savedRegion = urlParams.get('region');

      if (savedQuery) {
        const parts = savedQuery.split(' ');
        if (parts.length >= 4) {
          makeSelect.value = parts[0];
          updateModels();
          modelSelect.value = parts[1];
          updateYears();
          yearSelect.value = parts[2];
          partInput.value = parts.slice(3).join(' ');
        } else {
          partInput.value = savedQuery;
        }
        
        currentRegion = savedRegion || 'europe';
        regionSelect.value = currentRegion;
        currentQuery = savedQuery;
        fetchResults();
        return;
      }
      showRandomResults();
    }

    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    function showRandomResults() {
      const sampleWords = ['right fender', 'front bumper', 'side mirror', 'engine mount', 'tail light', 'brake disc'];
      if (!partInput.value.trim()) {
        currentQuery = sampleWords[Math.floor(Math.random() * sampleWords.length)];
        currentRegion = 'global';
        currentOffset = 0;
        fetchResults();
      }
    }

    // –¢—ä—Ä—Å–µ–Ω–µ
    async function fetchResults() {
      resultsDiv.innerHTML = '–¢—ä—Ä—Å–µ–Ω–µ...';
      paginationDiv.innerHTML = '';

      try {
        const condition = document.getElementById('conditionSelect').value;
        let response = await fetch(`/search?part=${encodeURIComponent(currentQuery)}&offset=${currentOffset}&region=${currentRegion}&condition=${condition}`);
        let data = await response.json();

        if (!data.results || data.results.length === 0) {
          resultsDiv.innerHTML = '–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏. –†–∞–∑—à–∏—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ –∫–∞—Ç–æ –∏–∑–±–µ—Ä–µ—à –ù–æ–≤–∏, –£–ø–æ—Ç—Ä–µ–±—è–≤–∞–Ω–∏, –≤ –ï–≤—Ä–æ–ø–∞ –∏–ª–∏ –ì–ª–æ–±–∞–ª–Ω–æ';
          // –°–∫—Ä–æ–ª–≤–∞–Ω–µ –¥–æ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –ª–∏–ø—Å–∞ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –Ω–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
          if (window.innerWidth <= 768) {
            setTimeout(() => {
              resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 100);
          }
          return;
        }

        displayResults(data.results);
        
        const totalItems = data.total || data.results.length * 1000;
        renderPagination(totalItems);
        updateUrlWithSearchParams();

        // –°–∫—Ä–æ–ª–≤–∞–Ω–µ –¥–æ –ø—ä—Ä–≤–∏—è —Ä–µ–∑—É–ª—Ç–∞—Ç –Ω–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (window.innerWidth <= 768) {
          setTimeout(() => {
            const firstResult = document.querySelector('.item-link');
            if (firstResult) {
              firstResult.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
          }, 100);
        }
      } catch (err) {
        console.error('‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ:', err);
        resultsDiv.innerHTML = '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ!';
        // –°–∫—Ä–æ–ª–≤–∞–Ω–µ –¥–æ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –≥—Ä–µ—à–∫–∞ –Ω–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (window.innerWidth <= 768) {
          setTimeout(() => {
            resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }, 100);
        }
      }
    }

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ
    async function loadCategories() {
      try {
        const res = await fetch('parts_categories.json');
        const categories = await res.json();
        const categoryColumn = document.getElementById('categoryColumn');
        
        categories.forEach(category => {
          const details = document.createElement('details');
          details.className = 'category';
          
          const bgCategoryName = category.bg.split(' - ')[0];
          const summary = document.createElement('summary');
          summary.className = 'category-title'; // üëâ –¥–æ–±–∞–≤—è–º–µ –Ω—É–∂–Ω–∏—è –∫–ª–∞—Å
          summary.textContent = bgCategoryName;
          details.appendChild(summary);

          
          const div = document.createElement('div');
          category.children.forEach(subCategory => {
            const button = document.createElement('button');
            button.textContent = subCategory.bg.replace(/^- /, '');
            button.onclick = () => {
              partInput.value = subCategory.en;
              searchBtn.click();
            };
            div.appendChild(button);
          });
          
          details.appendChild(div);
          categoryColumn.appendChild(details);
        });

        // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–ª—É—à–∞—Ç–µ–ª –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –¥—Ä—É–≥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const allDetails = document.querySelectorAll('#categoryColumn details');
        allDetails.forEach(detail => {
          detail.addEventListener('toggle', function() {
            if (this.open) {
              // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –¥—Ä—É–≥–∏ details –µ–ª–µ–º–µ–Ω—Ç–∏
              allDetails.forEach(otherDetail => {
                if (otherDetail !== this) {
                  otherDetail.open = false;
                }
              });
            }
          });
        });
      } catch (err) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ:', err);
      }
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –Ω–∞ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ
    function updateUrlWithSearchParams() {
      const newUrl = `${window.location.pathname}?query=${encodeURIComponent(currentQuery)}&region=${currentRegion}`;
      window.history.replaceState({ path: newUrl }, '', newUrl);
    }

    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    function displayResults(items) {
      resultsDiv.innerHTML = '';
      items.forEach(item => {
        const link = document.createElement('a');
        link.className = 'item-link';
        console.log('‚û°Ô∏è –ü—Ä–µ–¥–∞–≤–∞–Ω–æ –∑–∞–≥–ª–∞–≤–∏–µ –∫—ä–º product.html:', item.title);
        link.href = `product.html?id=${encodeURIComponent(item.itemId)}&title=${encodeURIComponent(item.title)}&priceBGN=${encodeURIComponent(item.priceBGN)}&query=${encodeURIComponent(currentQuery)}&region=${currentRegion}`;
    
        const div = document.createElement('div');
        div.className = 'item';
        div.innerHTML = `
          <img src="${item.image}" alt="${item.title}">
          <h3>${item.title}</h3>
          <p>–¶–µ–Ω–∞: ${item.priceBGN} –ª–≤. (${item.priceEUR} ‚Ç¨)</p>
        `;

        link.appendChild(div);
        resultsDiv.appendChild(link);
      });
    }

    // –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    function renderPagination(totalItems) {
      totalPages = Math.ceil(totalItems / itemsPerPage);
      const currentPage = Math.floor(currentOffset / itemsPerPage) + 1;
      
      if (totalPages <= 1) {
        paginationDiv.innerHTML = '';
        return;
      }

      paginationDiv.innerHTML = '';

      // –ë—É—Ç–æ–Ω–∏ –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
      const firstBtn = createPaginationButton('–ü—ä—Ä–≤–∞', currentPage === 1, () => {
        currentOffset = 0;
        fetchResults();
      });

      const prevBtn = createPaginationButton('–ü—Ä–µ–¥–∏—à–Ω–∞', currentPage === 1, () => {
        currentOffset = (currentPage - 2) * itemsPerPage;
        fetchResults();
      });

      paginationDiv.appendChild(firstBtn);
      paginationDiv.appendChild(prevBtn);

      // –ù–æ–º–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∏
      const startPage = Math.max(1, currentPage - 2);
      const endPage = Math.min(totalPages, startPage + 4);

      paginationDiv.classList.add('pagination');
    
      for (let i = startPage; i <= endPage; i++) {
        const pageBtn = createPaginationButton(i, false, () => {
          currentOffset = (i - 1) * itemsPerPage;
          fetchResults();
        });
        if (i === currentPage) {
          pageBtn.classList.add('active');
        }
        paginationDiv.appendChild(pageBtn);
      }

      // –ë—É—Ç–æ–Ω–∏ –∑–∞ —Å–ª–µ–¥–≤–∞—â–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏
      const nextBtn = createPaginationButton('–°–ª–µ–¥–≤–∞—â–∞', currentPage === totalPages, () => {
        currentOffset = currentPage * itemsPerPage;
        fetchResults();
      });

      const lastBtn = createPaginationButton('–ü–æ—Å–ª–µ–¥–Ω–∞', currentPage === totalPages, () => {
        currentOffset = (totalPages - 1) * itemsPerPage;
        fetchResults();
      });

      paginationDiv.appendChild(nextBtn);
      paginationDiv.appendChild(lastBtn);

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∏—Ç–µ
      const info = document.createElement('span');
      info.style.margin = '0 10px';
      paginationDiv.appendChild(info);
    }

    // –ü–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω–∏
    function createPaginationButton(text, disabled, onClick, isActive = false) {
      const btn = document.createElement('button');
      btn.textContent = text;
      btn.disabled = disabled;
      btn.onclick = onClick;
      if (isActive) btn.classList.add('active');
      return btn;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await loadVehicleData();
    await loadCategories();
    restoreLastSearch();

    // –°–ª—É—à–∞—Ç–µ–ª–∏ –∑–∞ –ø—Ä–æ–º—è–Ω–∞
    makeSelect.addEventListener('change', updateModels);
    modelSelect.addEventListener('change', updateYears);

    // –°–ª—É—à–∞—Ç–µ–ª –∑–∞ –±—É—Ç–æ–Ω–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ
    searchBtn.addEventListener('click', async () => {
      const partText = partInput.value.trim();
      currentRegion = regionSelect.value;
      const condition = document.getElementById('conditionSelect').value;

      if (!partText) {
        alert('–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ –Ω–∞ —á–∞—Å—Ç—Ç–∞!');
        return;
      }

      const make = makeSelect.value;
      const model = modelSelect.value;
      const year = yearSelect.value;

      if (make && model && year) {
        currentQuery = `${make} ${model} ${year} ${partText}`;
      } else {
        currentQuery = partText;
      }

      currentOffset = 0;
      await fetchResults();
    });
  })();
});



